services:
  api:
    build: .
    ports:
      - '8000:8000'
    env_file:
      - .env
    environment:
      - API_ENV=${API_ENV:-development}
      - DEBUG=${DEBUG:-True}
      - SENTRY_DSN=${SENTRY_DSN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_MODEL=${AGENT_MODEL}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}
      - OPEN_ROUTER_BASE_URL=${OPEN_ROUTER_BASE_URL}
    volumes:
      - db-data:/app/data
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ${APP_NETWORK:-local-network}

  db:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ${APP_NETWORK:-local-network}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db-data:
    driver: local
  postgres-data:
    driver: local

networks:
  local-network:
    driver: bridge
  dokploy-network:
    external: true
