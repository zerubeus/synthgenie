[project]
name = "synthgenie"
version = "0.1.0"
description = "AI backend for synthgenie"
readme = "README.md"
requires-python = ">=3.12"

license = { text = "CC BY-NC 4.0" }

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3.12",
]

authors = [{ name = "zerubeus", email = "zerubeus@gmail.com" }]

dependencies = [
    "fastapi>=0.116.1",
    "pydantic-ai[logfire]>=1.0.9",
    "python-dotenv>=1.1.0",
    "sentry-sdk[fastapi]>=2.25.0",
    "psycopg2-binary>=2.9.10",
]

[dependency-groups]
dev = ["colorlog>=6.9.0", "pyright>=1.1.403", "ruff>=0.12.4"]

[tool.ruff]
line-length = 120
target-version = "py312"
include = ["synthgenie/**/*.py"]

[tool.ruff.lint]
extend-select = [
    "Q",      # Enforces consistent use of quotes (flake8-quotes)
    "RUF100", # Checks for unused imports (ruff)
    "RUF018", # Checks for assignments in assert statements, which might not execute in optimized runtimes (ruff) - https://docs.astral.sh/ruff/rules/assignment-in-assert/
    "C90",    # Checks cyclomatic complexity to ensure code isn't too complex (mccabe)
    "UP",     # Suggests upgrades to newer Python syntax or features (pyupgrade)
    "I",      # Enforces sorting and organization of import statements (isort)
    "D",      # Enforces conventions for docstrings (pydocstyle)
    "TID251", # Bans certain types of relative imports for consistent import style (flake8-tidy-imports)
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
mccabe = { max-complexity = 100 } # Check McCabe complexity
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["synthgenie"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"synthgenie/**/*.py" = ["D", "TID251"]

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
include = ["synthgenie"]
venvPath = "."
venv = ".venv"

[project.scripts]
start = "synthgenie.app:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["synthgenie"]
